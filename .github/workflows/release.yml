name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      changelog: ${{ steps.get_changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Validate version format
          if ! [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Error: Invalid version format. Expected: v1.0.0 or v1.0.0-beta"
            exit 1
          fi

      - name: Extract changelog
        id: get_changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          CHANGELOG=$(awk -v ver="$VERSION" '
            /^## \[/ { if (found) exit; }
            $0 ~ "^## \\[" ver "\\]" { found=1; next; }
            found && /^## \[/ { exit; }
            found { print; }
          ' CHANGELOG.md)
          
          # Store multi-line output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: validate-version
    strategy:
      matrix:
        service: [frontend, backend, admin-dashboard, partner-dashboard]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './${{ matrix.service }}/package-lock.json'

      - name: Install dependencies
        working-directory: ./${{ matrix.service }}
        run: npm ci

      - name: Run linting
        working-directory: ./${{ matrix.service }}
        run: npm run lint

      - name: Run type checking
        working-directory: ./${{ matrix.service }}
        run: npm run type-check

      - name: Run tests
        working-directory: ./${{ matrix.service }}
        run: npm run test:ci
        env:
          CI: true

      - name: Build application
        working-directory: ./${{ matrix.service }}
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.PRODUCTION_APP_URL }}

  security-scan:
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          for service in frontend backend admin-dashboard partner-dashboard; do
            echo "Auditing $service..."
            cd $service
            npm audit --production
            cd ..
          done

  build-and-push:
    runs-on: ubuntu-latest
    needs: [validate-version, test, security-scan]
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        service: [frontend, backend, admin-dashboard, partner-dashboard]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-version.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-version.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  database-migration:
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-push]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install migration dependencies
        working-directory: ./backend
        run: npm ci --production=false

      - name: Run database migrations
        working-directory: ./backend
        run: npm run migrate:production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NODE_ENV: production

      - name: Verify migration status
        working-directory: ./backend
        run: npm run migrate:status
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: [validate-version, build-and-push, database-migration]
    environment: production
    strategy:
      matrix:
        service: [frontend, backend, admin-dashboard, partner-dashboard]
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v4
        with:
          namespace: boom-card-production
          manifests: |
            k8s/production/${{ matrix.service }}-deployment.yaml
            k8s/production/${{ matrix.service }}-service.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:${{ needs.validate-version.outputs.version }}
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/${{ matrix.service }} -n boom-card-production --timeout=300s
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

      - name: Verify deployment health
        run: |
          kubectl get pods -l app=${{ matrix.service }} -n boom-card-production
          kubectl describe deployment/${{ matrix.service }} -n boom-card-production
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

  smoke-tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        working-directory: ./e2e
        run: npm ci

      - name: Run smoke tests
        working-directory: ./e2e
        run: npm run test:smoke
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_APP_URL }}
          PRODUCTION_API_URL: ${{ secrets.PRODUCTION_API_URL }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: smoke-test-results
          path: ./e2e/test-results/

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-version, smoke-tests]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-version.outputs.version }}
          release_name: Release ${{ needs.validate-version.outputs.version }}
          body: |
            ## What's Changed
            ${{ needs.validate-version.outputs.changelog }}
            
            ## Docker Images
            - Frontend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.validate-version.outputs.version }}`
            - Backend: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.validate-version.outputs.version }}`
            - Admin Dashboard: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin-dashboard:${{ needs.validate-version.outputs.version }}`
            - Partner Dashboard: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-partner-dashboard:${{ needs.validate-version.outputs.version }}`
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.validate-version.outputs.previous_version }}...${{ needs.validate-version.outputs.version }}
          draft: false
          prerelease: ${{ contains(needs.validate-version.outputs.version, '-') }}

  notify:
    runs-on: ubuntu-latest
    needs: [validate-version, create-release]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Release ${{ needs.validate-version.outputs.ver