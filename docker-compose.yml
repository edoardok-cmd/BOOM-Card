version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: boom-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-boom_card}
      POSTGRES_USER: ${DB_USER:-boom_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-boom_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-boom_user} -d ${DB_NAME:-boom_card}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - boom-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: boom-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-boom_redis_password} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - boom-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: boom-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${BACKEND_PORT:-4000}
      DATABASE_URL: postgresql://${DB_USER:-boom_user}:${DB_PASSWORD:-boom_secure_password}@postgres:5432/${DB_NAME:-boom_card}
      REDIS_URL: redis://:${REDIS_PASSWORD:-boom_redis_password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_refresh_secret_here}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-central-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-boom-card-assets}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@boomcard.bg}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      ADMIN_URL: ${ADMIN_URL:-http://localhost:3001}
      PARTNER_URL: ${PARTNER_URL:-http://localhost:3002}
      SENTRY_DSN: ${SENTRY_DSN}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    ports:
      - "${BACKEND_PORT:-4000}:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - boom-network

  # Frontend Consumer Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: boom-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
      NEXT_PUBLIC_GTM_ID: ${GTM_ID}
      NEXT_PUBLIC_GA_ID: ${GA_ID}
      NEXT_PUBLIC_DEFAULT_LOCALE: ${DEFAULT_LOCALE:-bg}
      NEXT_PUBLIC_SUPPORTED_LOCALES: ${SUPPORTED_LOCALES:-bg,en}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - boom-network

  # Admin Dashboard
  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: boom-admin
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    ports:
      - "${ADMIN_PORT:-3001}:3000"
    volumes:
      - ./admin:/app
      - /app/node_modules
      - /app/.next
    networks:
      - boom-network

  # Partner Dashboard
  partner:
    build:
      context: ./partner
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: boom-partner
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:4000}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN}
    ports:
      - "${PARTNER_PORT:-3002}:3000"
    volumes:
      - ./partner:/app
      - /app/node_modules
      - /app/.next
    networks:
      - boom-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: boom-nginx
    restart: unless-stopped
    depends_on:
      - frontend
      - admin
      - partner
      - backend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - boom-network

  # Database Backup Service
  db-backup:
    image: postgres:15-alpine
    container_name: boom-db-backup
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: ${DB_PASSWORD:-boom_secure_password}
    volumes:
      - db_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    entrypoint: ["/bin/sh", "-c", "echo '0 2 * * * /backup.sh' | crontab - && crond -f"]
    networks:
      - boom-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: boom-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - boom-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: boom-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3003}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - boom-network

  # Log Management - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: boom-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - boom-network

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: boom-kibana
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      ELASTICSEARCH_HOSTS: '["http://elasticsearch:9200"]'
    networks:
      - boom-network

  # Queue Worker
  queue-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: boom-queue-worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER:-boom_user}:${DB_PASSWORD:-boom_secure_password}@postgres:5432/${DB_NAME:-boom_card}
      REDIS_URL: redis://:${REDIS_PASSWORD:-boom_redis_password}@redis:6379
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-eu-central-1}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-boom-card-assets}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@boomcard.bg}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - queue_logs:/app/logs
    networks:
      - boom-network

networks:
  boom-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  nginx_logs:
  db_backups:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  queue_logs:
