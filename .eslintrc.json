{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2022,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": ["./tsconfig.json"]
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "typescript": {
        "alwaysTryTypes": true
      }
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "es2022": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:jsx-a11y/recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:security/recommended",
    "plugin:jest/recommended",
    "next/core-web-vitals",
    "prettier"
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "jsx-a11y",
    "import",
    "security",
    "jest",
    "unused-imports"
  ],
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports"
      }
    ],
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/strict-boolean-expressions": [
      "error",
      {
        "allowString": false,
        "allowNumber": false
      }
    ],
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-misused-promises": "error",
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    
    
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-uses-react": "off",
    "react/jsx-filename-extension": [
      "error",
      {
        "extensions": [".tsx", ".jsx"]
      }
    ],
    "react/jsx-props-no-spreading": "off",
    "react/require-default-props": "off",
    "react/jsx-boolean-value": ["error", "never"],
    "react/self-closing-comp": "error",
    "react/jsx-curly-brace-presence": [
      "error",
      {
        "props": "never",
        "children": "never"
      }
    ],
    
    
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "error",
    
    
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "type"
        ],
        "newlines-between": "always",
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        }
      }
    ],
    "import/newline-after-import": "error",
    "import/no-duplicates": "error",
    "import/no-unresolved": "error",
    "import/no-cycle": "error",
    "import/no-default-export": "off",
    
    
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      {
        "vars": "all",
        "varsIgnorePattern": "^_",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    
    
    "security/detect-object-injection": "off",
    "security/detect-non-literal-regexp": "off",
    
    
    "no-console": [
      "error",
      {
        "allow": ["warn", "error"]
      }
    ],
    "no-debugger": "error",
    "no-alert": "error",
    "no-await-in-loop": "error",
    "no-return-await": "error",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "prefer-const": "error",
    "no-var": "error",
    "object-shorthand": "error",
    "quote-props": ["error", "as-needed"],
    "prefer-template": "error",
    "prefer-arrow-callback": "error",
    "arrow-body-style": ["error", "as-needed"],
    "no-param-reassign": [
      "error",
      {
        "props": true,
        "ignorePropertyModificationsFor": ["acc", "accumulator", "e", "ctx", "req", "request", "res", "response", "state"]
      }
    ],
    "no-useless-constructor": "error",
    "no-dupe-class-members": "error",
    "no-duplicate-imports": "off",
    "prefer-destructuring": [
      "error",
      {
        "object": true,
        "array": false
      }
    ],
    "dot-notation": "error",
    "one-var": ["error", "never"],
    "no-multi-assign": "error",
    "no-plusplus": "off",
    "operator-linebreak": ["error", "before"],
    "no-unused-expressions": "error",
    "no-useless-return": "error",
    "prefer-promise-reject-errors": "error",
    "prefer-async-await": "error",
    "no-else-return": "error",
    "no-empty-function": "error",
    "max-classes-per-file": ["error", 1],
    "no-duplicate-case": "error",
    "no-irregular-whitespace": "error",
    "no-unexpected-multiline": "error",
    "valid-typeof": "error",
    "eqeqeq": ["error", "always"],
    "no-lone-blocks": "error",
    "no-proto": "error",
    "no-self-compare": "error",
    "no-unused-labels": "error",
    "no-useless-call": "error",
    "no-with": "error",
    "radix": "error",
    "yoda": "error",
    "no-delete-var": "error",
    "no-label-var": "error",
    "no-restricted-globals": ["error", "event", "fdescribe"],
    "no-shadow-restricted-names": "error",
    "no-undef-init": "error",
    "block-spacing": "error",
    "comma-style": ["error", "last"],
    "func-call-spacing": ["error", "never"],
    "key-spacing": "error",
    "keyword-spacing": "error",
    "no-trailing-spaces": "error",
    "no-unneeded-ternary": "error",
    "no-whitespace-before-property": "error",
    "object-curly-spacing": ["error", "always"],
    "semi": ["error", "always"],
    "space-before-blocks": "error",
    "space-in-parens": ["error", "never"],
    "space-infix-ops": "error",
    "space-unary-ops": "error",
    "spaced-comment": ["error", "always"],
    "arrow-spacing": "error",
    "no-confusing-arrow": "error",
    "no-useless-computed-key": "error",
    "no-useless-rename": "error",
    "rest-spread-spacing": ["error", "never"],
    "template-curly-spacing": ["error", "never"]
  },
  "overrides": [
    {
      "files": ["*.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    {
      "files": ["*.test.ts", "*.test.tsx", "*.spec.ts", "*.spec.tsx"],
      "rules": {
        "@typescript-eslint/no-explicit-any": "off",
        "security/detect-object-injection": "off"
      }
    },
    {
      "files": ["next.config.js", "jest.config.js", "*.config.js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["pages*.tsx", "pages*.ts", "app*.tsx", "app*.ts"],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ],
  "ignorePatterns": [
    "node_modules",
    ".next",
    "out",
    "dist",
    "build",
    "coverage",
    "*.min.js",
    "public/vendor"
  ]
}
