// Enums
export enum UserRole {
  ADMIN = 'ADMIN',
  USER = 'USER',
}

export enum UserStatus {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE',
  PENDING_VERIFICATION = 'PENDING_VERIFICATION',
  SUSPENDED = 'SUSPENDED',
}

// Base Interface for common entity fields
export interface IBaseEntity {
  id: string; // Using UUIDs for IDs
  createdAt: Date;
  updatedAt: Date;
}

// User Interface
export interface IUser extends IBaseEntity {
  email: string;
  username: string;
  passwordHash: string;
  role: UserRole;
  status: UserStatus;
  lastLoginAt?: Date;
  profilePictureUrl?: string;
}

// Deck Interface
export interface IDeck extends IBaseEntity {
  name: string;
  description?: string;
  userId: string; // Foreign key to IUser (owner)
  isPublic: boolean;
  tags?: string[];
  thumbnailUrl?: string;
}

// Card Interface
export interface ICard extends IBaseEntity {
  deckId: string; // Foreign key to IDeck
  front: string;  // Content for the front of the card
  back: string;   // Content for the back of the card
  notes?: string; // Additional notes or context for the card
  order?: number; // Order within the deck
}

// backend/src/interfaces/index.ts - PART 2

// --- DTOs (Data Transfer Objects) for API Requests & Responses ---

// Authentication related DTOs
export interface IRegisterRequest {
  email: string;
  password: string;
  firstName: string;
  lastName: string;
}

export interface ILoginRequest {
  email: string;
  password: string;
}

export interface IAuthResponse {
  token: string;
  user: {
    id: string;
    email: string;
    firstName: string;
    lastName: string;
  };
}

// Card related DTOs
export interface ICreateCardRequest {
  userId: string;
  initialBalance?: number; // Optional, defaults to 0
  currency?: string; // Optional, defaults to a base currency like USD ('USD')
  // Note: Card number is generated by the system, not provided by user
}

export interface IUpdateCardRequest {
  status?: 'active' | 'inactive' | 'blocked';
  // Other updatable card properties can be added here if needed,
  // e.g., 'nickname', 'expirationDate' (if it's a physical card representation)
}

export interface ICardResponse {
  id: string;
  userId: string;
  cardNumber: string; // Masked for display, e.g., 'XXXX XXXX XXXX 1234'
  balance: number;
  currency: string;
  status: 'active' | 'inactive' | 'blocked';
  createdAt: Date;
  updatedAt: Date;
  // Potentially include user details if often fetched together
  user?: {
    id: string;
    firstName: string;
    lastName: string;
  };
}

// Transaction related DTOs
export interface ICreateTransactionRequest {
  cardId: string;
  amount: number;
  type: 'debit' | 'credit'; // 'debit' for spending, 'credit' for topping up
  description?: string;
  // Potentially add a 'transactionType' for categorisation, e.g., 'purchase', 'topup', 'transfer'
}

export interface ITransactionResponse {
  id: string;
  cardId: string;
  amount: number;
  type: 'debit' | 'credit';
  status: 'pending' | 'completed' | 'failed';
  description?: string;
  createdAt: Date;
  updatedAt: Date;
  // Potentially include card details if often fetched together
  card?: {
    id: string;
    cardNumber: string;
    currency: string;
  };
}

// General purpose interfaces
export interface IPaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
}

export interface IErrorResponse {
  statusCode: number;
  message: string;
  details?: string | string[]; // More specific error details, e.g., validation errors
  errorCode?: string; // Custom application-specific error code
}

// Request parameters interface (for common query params)
export interface IRequestParams {
  id?: string;
  userId?: string;
  cardId?: string;
  // ... other common ID parameters
}

// Query parameters interface (for pagination, filtering)
export interface IQueryParams {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
  search?: string;
  status?: string;
  type?: string;
  // ... any other common filter parameters
}
