{"version":3,"file":"users.js","sourceRoot":"","sources":["users.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\n/**\n * Enums for User Roles and Statuses\n */\nexport enum UserRole {\n  CONSUMER = 'consumer',\n  PARTNER = 'partner',\n  ADMIN = 'admin',\n}\n\nexport enum UserStatus {\n  ACTIVE = 'active',\n  INACTIVE = 'inactive',\n  PENDING = 'pending',\n  SUSPENDED = 'suspended',\n}\n\n/**\n * Interface for a User entity\n */\nexport interface User {\n  id: string;\n  email: string;\n  passwordHash: string; // Stored hash of the user's password\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  status: UserStatus;\n  profilePictureUrl: string | null;\n  phoneNumber: string | null;\n  address: string | null;\n  city: string | null;\n  country: string | null;\n  preferredLanguage: 'en' | 'bg'; // Supported languages: English, Bulgarian\n  isEmailVerified: boolean;\n  subscriptionId: string | null; // Nullable, as not all users might have a subscription\n  createdAt: Date;\n  updatedAt: Date;\n  lastLoginAt: Date | null;\n}\n\n/**\n * Helper function to generate a simple mock password hash.\n * In a real scenario, this would involve a robust hashing algorithm like bcrypt.\n * For fixtures, we just need a consistent placeholder that looks like a hash.\n * This is not cryptographically secure and is for testing purposes only.\n */\nconst generateMockPasswordHash = (password: string): string => {\n  // Example placeholder for a hashed password.\n  // In a real testing environment, you might use a library like `bcrypt`\n  // and pre-hash passwords for more realistic fixture data.\n  // e.g., return bcrypt.hashSync(password, 10);\n  return `mocked_hash_${password}_${Math.random().toString(36).substring(2, 10)}`;\n};\n\n/**\n * Helper function to create a Date object from an ISO string or a current date.\n * Ensures consistent date format for fixture data.\n */\nconst createDate = (dateString?: string): Date => {\n  return dateString ? new Date(dateString) : new Date();\n};\n\n/**\n * Test User Fixtures\n * These users represent various scenarios for testing the platform's functionality.\n * They cover different roles, statuses, and data completeness levels.\n */\nexport const users: User[] = [\n  {\n    id: uuidv4(),\n    email: 'admin@boomcard.com',\n    passwordHash: generateMockPasswordHash('AdminPassword123!'),\n    firstName: 'Alice',\n    lastName: 'Admin',\n    role: UserRole.ADMIN,\n    status: UserStatus.ACTIVE,\n    profilePictureUrl: null,\n    phoneNumber: '+359881234567',\n    address: '123 Admin St',\n    city: 'Sofia',\n    country: 'Bulgaria',\n    preferredLanguage: 'en',\n    isEmailVerified: true,\n    subscriptionId: null, // Admins typically don't have consumer subscriptions\n    createdAt: createDate('2023-01-15T10:00:00Z'),\n    updatedAt: createDate('2023-10-20T14:30:00Z'),\n    lastLoginAt: createDate('2023-11-01T09:00:00Z'),\n  },\n  {\n    id: uuidv4(),\n    email: 'consumer@example.com',\n    passwordHash: generateMockPasswordHash('ConsumerPass!23'),\n    firstName: 'Bob',\n    lastName: 'Consumer',\n    role: UserRole.CONSUMER,\n    status: UserStatus.ACTIVE,\n    profilePictureUrl: 'https://example.com/profiles/bob.jpg',\n    phoneNumber: '+359887654321',\n    address: '456 Consumer Blvd',\n    city: 'Plovdiv',\n    country: 'Bulgaria',\n    preferredLanguage: 'bg',\n    isEmailVerified: true,\n    subscriptionId: uuidv4(), // Example active subscription ID\n    createdAt: createDate('2023-02-01T11:00:00Z'),\n    updatedAt: createDate('2023-10-25T16:00:00Z'),\n    lastLoginAt: createDate('2023-11-02T10:30:00Z'),\n  },\n  {\n    id: uuidv4(),\n    email: 'partner@restaurant.com',\n    passwordHash: generateMockPasswordHash('PartnerR123!'),\n    firstName: 'Charlie',\n    lastName: 'Partner',\n    role: UserRole.PARTNER,\n    status: UserStatus.ACTIVE,\n    profilePictureUrl: null,\n    phoneNumber: '+359891122334',\n    address: '789 Partner Ave',\n    city: 'Varna',\n    country: 'Bulgaria',\n    preferredLanguage: 'en',\n    isEmailVerified: true,\n    subscriptionId: uuidv4(), // Example partner subscription ID\n    createdAt: createDate('2023-03-10T09:00:00Z'),\n    updatedAt: createDate('2023-09-15T10:00:00Z'),\n    lastLoginAt: createDate('2023-10-30T11:00:00Z'),\n  },\n  {\n    id: uuidv4(),\n    email: 'inactive@example.com',\n    passwordHash: generateMockPasswordHash('InactiveUser456'),\n    firstName: 'Diana',\n    lastName: 'Inactive',\n    role: UserRole.CONSUMER,\n    status: UserStatus.INACTIVE,\n    profilePictureUrl: null,\n    phoneNumber: null,\n    address: null,\n    city: null,\n    country: null,\n    preferredLanguage: 'en',\n    isEmailVerified: false, // User never verified email or was deactivated\n    subscriptionId: null,\n    createdAt: createDate('2023-04-05T14:00:00Z'),\n    updatedAt: createDate('2023-04-05T14:00:00Z'),\n    lastLoginAt: null, // User never logged in or was inactive for a long time\n  },\n  {\n    id: uuidv4(),\n    email: 'pendingpartner@hotel.com',\n    passwordHash: generateMockPasswordHash('PendingPass!789'),\n    firstName: 'Eve',\n    lastName: 'Pending',\n    role: UserRole.PARTNER,\n    status: UserStatus.PENDING,\n    profilePictureUrl: null,\n    phoneNumber: '+359879988776',\n    address: '101 Hotel Rd',\n    city: 'Burgas',\n    country: 'Bulgaria',\n    preferredLanguage: 'bg',\n    isEmailVerified: false, // Partner is awaiting verification/approval\n    subscriptionId: null, // Subscription not yet active for pending partners\n    createdAt: createDate('2023-05-20T10:00:00Z'),\n    updatedAt: createDate('2023-05-20T10:00:00Z'),\n    lastLoginAt: null,\n  },\n  {\n    id: uuidv4(),\n    email: 'suspended@example.com',\n    passwordHash: generateMockPasswordHash('SuspendedUser!'),\n    firstName: 'Frank',\n    lastName: 'Suspended',\n    role: UserRole.CONSUMER,\n    status: UserStatus.SUSPENDED,\n    profilePictureUrl: null,\n    phoneNumber: '+359880011223',\n    address: '222 Suspended St',\n    city: 'Ruse',\n    country: 'Bulgaria',\n    preferredLanguage: 'en',\n    isEmailVerified: true, // Was verified, but account suspended\n    subscriptionId: uuidv4(), // Had a subscription, but now suspended\n    createdAt: createDate('2023-06-01T10:00:00Z'),\n    updatedAt: createDate('2023-08-01T10:00:00Z'), // Date of suspension\n    lastLoginAt: createDate('2023-07-25T10:00:00Z'),\n  },\n  {\n    id: uuidv4(),\n    email: 'newuser@example.com',\n    passwordHash: generateMockPasswordHash('NewUserPassword!'),\n    firstName: 'Grace',\n    lastName: 'New',\n    role: UserRole.CONSUMER,\n    status: UserStatus.ACTIVE,\n    profilePictureUrl: null,\n    phoneNumber: null,\n    address: null,\n    city: null,\n    country: null,\n    preferredLanguage: 'en',\n    isEmailVerified: false, // Newly registered user, email not yet verified\n    subscriptionId: null,\n    createdAt: createDate(), // Recently created\n    updatedAt: createDate(),\n    lastLoginAt: null,\n  },\n];\n\n/**\n * Helper functions to retrieve specific users from the fixture array.\n * Useful for tests that need to target a particular user type or instance.\n */\nexport const getUserById = (id: string): User | undefined => {\n  return users.find(user => user.id === id);\n};\n\nexport const getUserByEmail = (email: string): User | undefined => {\n  return users.find(user => user.email === email);\n};\n\nexport const getAdminUser = (): User | undefined => {\n  return users.find(user => user.role === UserRole.ADMIN && user.status === UserStatus.ACTIVE);\n};\n\nexport const getActiveConsumerUser = (): User | undefined => {\n  return users.find(user => user.role === UserRole.CONSUMER && user.status === UserStatus.ACTIVE);\n};\n\nexport const getActivePartnerUser = (): User | undefined => {\n  return users.find(user => user.role === UserRole.PARTNER && user.status === UserStatus.ACTIVE);\n};\n\nexport const getInactiveUser = (): User | undefined => {\n  return users.find(user => user.status === UserStatus.INACTIVE);\n};\n\nexport const getPendingPartnerUser = (): User | undefined => {\n  return users.find(user => user.role === UserRole.PARTNER && user.status === UserStatus.PENDING);\n};\n\nexport const getSuspendedUser = (): User | undefined => {\n  return users.find(user => user.status === UserStatus.SUSPENDED);\n};"]}