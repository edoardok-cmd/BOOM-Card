{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["// 1. All import statements\nimport request, { SuperTest, Test } from 'supertest';\nimport { Application } from 'express';\nimport { Client as PGClient } from 'pg';\nimport Redis from 'ioredis';\nimport path from 'path';\n// import { DotenvConfigOutput, DotenvParseOutput } from 'dotenv'; // Types if you need to strictly type dotenv results\n\n// 2. All TypeScript interfaces and types\n\n/**\n * Represents a simplified User object for testing purposes.\n */\nexport interface User {\n  id: string;\n  email: string;\n  password?: string; // Optional for received user objects, but present for creation\n  firstName: string;\n  lastName: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Represents a simplified Card object for testing purposes.\n */\nexport interface Card {\n  id: string;\n  userId: string;\n  name: string;\n  balance: number;\n  currency: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\n/**\n * Standard structure for a successful API response.\n */\nexport interface ApiSuccessResponse<T> {\n  success: true;\n  data: T;\n  message?: string;\n}\n\n/**\n * Standard structure for an error API response.\n */\nexport interface ApiErrorResponse {\n  success: false;\n  error: {\n    code: string; // e.g., 'VALIDATION_ERROR', 'UNAUTHORIZED', 'NOT_FOUND'\n    message: string;\n    details?: any; // For validation errors, etc.\n    statusCode: number; // HTTP status code (e.g., 400, 401, 404, 500)\n  };\n}\n\n/**\n * Union type for any API response, allowing for success or error.\n */\nexport type ApiResponse<T> = ApiSuccessResponse<T> | ApiErrorResponse;\n\n/**\n * Interface for the response received after a successful user authentication (login).\n */\nexport interface AuthTokenResponse {\n  accessToken: string;\n  tokenType: 'Bearer';\n  expiresIn: number; // Time in seconds until token expires\n  user: User; // The authenticated user's details\n}\n\n/**\n * Context object to hold shared resources and state across test suites or individual tests.\n * This helps in managing application instance, database connections, auth tokens, etc.\n */\nexport interface TestContext {\n  app: Application; // The Express application instance\n  request: SuperTest<Test>; // Supertest instance for making API requests\n  pgClient?: PGClient; // PostgreSQL client for direct DB interaction (e.g., cleanup)\n  redisClient?: Redis; // Redis client for direct Redis interaction (e.g., cache cleanup)\n  authToken?: string; // JWT token for authenticated API requests\n  testUser?: User; // The user created specifically for the current test context\n}\n\n// 3. All constants and configuration\n\n/**\n * Path to the environment file specifically for tests.\n * This ensures test environments are isolated from development environments.\n */\nexport const TEST_ENV_FILE_PATH = path.resolve(process.cwd(), '.env.test');\n\n/**\n * Default credentials for a test user that can be used or created across tests.\n */\nexport const DEFAULT_TEST_USER_CREDENTIALS = {\n  email: 'testuser@example.com',\n  password: 'TestPassword123!',\n  firstName: 'Test',\n  lastName: 'User',\n};\n\n/**\n * Base API prefix for all routes (e.g., /api/v1).\n */\nexport const API_PREFIX = '/api/v1';\n\n/**\n * Specific API paths for common endpoints.\n */\nexport const AUTH_API_PATH = `${API_PREFIX}/auth`;\nexport const USERS_API_PATH = `${API_PREFIX}/users`;\nexport const CARDS_API_PATH = `${API_PREFIX}/cards`;\n\n/**\n * Configuration for the PostgreSQL test database.\n * Uses environment variables with sensible defaults for local testing.\n * It's crucial to use a dedicated test database to avoid data corruption.\n */\nexport const TEST_DB_CONFIG = {\n  user: process.env.PG_TEST_USER || 'boom_test_user',\n  host: process.env.PG_TEST_HOST || 'localhost',\n  database: process.env.PG_TEST_DATABASE || 'boom_card_test_db',\n  password: process.env.PG_TEST_PASSWORD || 'testpassword',\n  port: parseInt(process.env.PG_TEST_PORT || '5433', 10), // Often uses a different port than dev DB\n};\n\n/**\n * Configuration for the Redis test instance.\n * Uses environment variables with defaults, and specifies a different DB index or port\n * to isolate test Redis data from development Redis data.\n */\nexport const TEST_REDIS_CONFIG = {\n  host: process.env.REDIS_TEST_HOST || 'localhost',\n  port: parseInt(process.env.REDIS_TEST_PORT || '6380', 10), // Often uses a different port than dev Redis\n  password: process.env.REDIS_TEST_PASSWORD || undefined, // Only if your Redis requires a password\n  db: parseInt(process.env.REDIS_TEST_DB || '1', 10), // Use a different DB index for tests\n};\n\n// 4. Any decorators or metadata\n// No specific decorators or metadata are typically used in a general test helper file.\n// These would be more relevant within frameworks like NestJS for dependency injection or module definitions.\n```\n\n```typescript\nimport mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport request from 'supertest';\nimport { app as testApp } from '../../src/app'; // Assuming your main Express app instance is exported as 'app'\nimport { User, UserDocument } from '../../src/models/user.model';\nimport { BoomCard, BoomCardDocument } from '../../src/models/boomCard.model';\nimport config from '../../src/config/config'; // Assuming config contains JWT_SECRET and expiration\nimport { UserRole } from '../../src/types/user';\nimport { BoomCardStatus, BoomCardType } from '../../src/types/boomCard';\n\n// Define a structure for seeding data if not already defined in Part 1\nexport interface SeedDataType {\n  users?: Partial<UserDocument>[];\n  boomCards?: Partial<BoomCardDocument>[];\n}\n\n/**\n * Clears all collections in the test database.\n * Ensure mongoose connection is established before calling this.\n */\nexport async function clearDatabase(): Promise<void> {\n  if (mongoose.connection.readyState === 0) {\n    console.warn('Mongoose not connected, skipping clearDatabase.');\n    return;\n  }\n  const collections = mongoose.connection.collections;\n  for (const key in collections) {\n    if (Object.prototype.hasOwnProperty.call(collections, key)) {\n      await collections[key].deleteMany({});\n    }\n  console.log('Database cleared.');\n}\n\n/**\n * Creates and saves a test user to the database.\n * @param userData Partial user data to override defaults. Password will be hashed.\n * @returns The created user document.\n */\nexport async function createTestUser(userData?: Partial<UserDocument>): Promise<UserDocument> {\n  const defaultUser = {\n    username: `testuser_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,\n    email: `test_${Date.now()}_${Math.random().toString(36).substring(2, 8)}@example.com`,\n    password: 'Password123!',\n    role: UserRole.USER,\n    balance: 0,\n    isEmailVerified: true,\n  };\n\n  const userToCreate = { ...defaultUser, ...userData };\n\n  // Hash password if provided\n  if (userToCreate.password) {\n    userToCreate.password = await bcrypt.hash(userToCreate.password, 10);\n  }\n\n  const user = new User(userToCreate);\n  await user.save();\n  return user;\n}\n\n/**\n * Creates and saves a test Boom Card to the database.\n * @param ownerId The ID of the user who owns this card.\n * @param cardData Partial Boom Card data to override defaults.\n * @returns The created Boom Card document.\n */\nexport async function createTestBoomCard(ownerId: string, cardData?: Partial<BoomCardDocument>): Promise<BoomCardDocument> {\n  const defaultBoomCard = {\n    owner: new mongoose.Types.ObjectId(ownerId),\n    cardType: BoomCardType.GENERAL,\n    status: BoomCardStatus.ACTIVE,\n    balance: 100,\n    cardNumber: `BOOM-${Date.now()}-${Math.floor(Math.random() * 10000)}`,\n    expirationDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year from now\n    lastUsed: new Date(),\n  };\n\n  const cardToCreate = { ...defaultBoomCard, ...cardData };\n\n  const boomCard = new BoomCard(cardToCreate);\n  await boomCard.save();\n  return boomCard;\n}\n\n/**\n * Seeds the database with default or provided test data.\n * Clears the database before seeding.\n * @param seedData Optional data to seed the database with.\n * @returns An object containing the created users and boom cards.\n */\nexport async function seedDatabase(seedData?: SeedDataType): Promise<{ users: UserDocument[], boomCards: BoomCardDocument[] }> {\n  console.log('Seeding database...');\n  await clearDatabase();\n\n  const users: UserDocument[] = [];\n  const boomCards: BoomCardDocument[] = [];\n\n  // Create default users\n  const regularUser = await createTestUser({\n    username: 'testuser',\n    email: 'user@example.com',\n    password: 'Password123!',\n  });\n  users.push(regularUser);\n\n  const adminUser = await createTestUser({\n    username: 'testadmin',\n    email: 'admin@example.com',\n    password: 'AdminPassword123!',\n    role: UserRole.ADMIN,\n  });\n  users.push(adminUser);\n\n  // Create default boom cards for the regular user\n  const generalCard = await createTestBoomCard(regularUser._id.toString(), {\n    cardType: BoomCardType.GENERAL,\n    balance: 250,\n  });\n  boomCards.push(generalCard);\n\n  const giftCard = await createTestBoomCard(regularUser._id.toString(), {\n    cardType: BoomCardType.GIFT,\n    balance: 50,\n    status: BoomCardStatus.ACTIVE,\n  });\n  boomCards.push(giftCard);\n\n  // Add any custom users from seedData\n  if (seedData?.users && seedData.users.length > 0) {\n    for (const userData of seedData.users) {\n      users.push(user);\n    }\n\n  // Add any custom boom cards from seedData (requires owner ID to exist)\n  if (seedData?.boomCards && seedData.boomCards.length > 0) {\n    for (const cardData of seedData.boomCards) {\n      if (cardData.owner) { // Ensure owner is provided for custom cards\n        const card = await createTestBoomCard(cardData.owner.toString(), cardData);\n        boomCards.push(card);\n      } else {\n        console.warn('Skipping custom BoomCard seed: owner ID is missing.');\n      }\n  }\n\n  console.log('Database seeded.');\n  return { users, boomCards };\n}\n\n/**\n * Generates a JSON Web Token for a given user or payload.\n * @param user The user document or a plain object containing user data (e.g., _id, role, email).\n * @returns The generated JWT string.\n */\nexport function generateTestToken(user: UserDocument | Record<string, any>): string {\n  const payload = {\n    _id: user._id,\n    role: user.role,\n    email: user.email,\n  };\n  // Ensure JWT_SECRET is loaded from config\n  if (!config.jwt.secret) {\n    throw new Error('JWT_SECRET not configured in test environment.');\n  }\n  return jwt.sign(payload, config.jwt.secret, { expiresIn: config.jwt.accessExpirationMinutes + 'm' });\n}\n\n/**\n * Returns the Authorization header string with a Bearer token.\n * @param token The JWT string.\n * @returns The full Authorization header value.\n */\nexport function getAuthHeader(token: string): string {\n  return `Bearer ${token}`;\n}\n\n/**\n * Creates an authenticated supertest agent for making API requests to the `testApp`.\n * @param token The JWT string.\n * @returns A supertest agent with the Authorization header set.\n */\nexport function getAuthenticatedRequest(token: string): request.SuperTest<request.Test> {\n  return request(testApp).set('Authorization', getAuthHeader(token));\n}\n\n/**\n * A helper to create a user, log them in (get a token), and return both.\n * Saves the user to the database.\n * @param userData Optional user data for creation.\n * @returns An object containing the created user document and their authentication token.\n */\nexport async function createAndLoginUser(userData?: Partial<UserDocument>): Promise<{ user: UserDocument, token: string }> {\n  const token = generateTestToken(user);\n  return { user, token };\n}\n\n/**\n * Creates an admin user, logs them in, and returns both.\n * Saves the admin user to the database.\n * @param userData Optional user data for creation (will override default admin properties).\n * @returns An object containing the created admin user document and their authentication token.\n */\nexport async function createAndLoginAdmin(userData?: Partial<UserDocument>): Promise<{ user: UserDocument, token: string }> {\n  const adminToken = generateTestToken(adminUser);\n  return { user: adminUser, token: adminToken };\n}\n\n// Export default test data for convenience in tests\nexport const testData = {\n  defaultUser: {\n    username: 'testuser_static',\n    email: 'user_static@example.com',\n    password: 'Password123!',\n    role: UserRole.USER,\n  },\n  defaultAdmin: {\n    username: 'testadmin_static',\n    email: 'admin_static@example.com',\n    password: 'AdminPassword123!',\n    role: UserRole.ADMIN,\n  },\n  defaultGeneralCard: {\n    cardType: BoomCardType.GENERAL,\n    balance: 250,\n  },\n  defaultGiftCard: {\n    cardType: BoomCardType.GIFT,\n    balance: 50,\n  },\n};\n\n}\n}\n}\n"]}