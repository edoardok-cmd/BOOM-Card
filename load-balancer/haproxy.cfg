global
    maxconn 4096
    log stdout local0
    log stdout local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Modern SSL/TLS configuration
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets

    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024
    tune.http.maxhdr 101

defaults
    log     global
    mode    http
    option  httplog
    option  dontlognull
    option  log-health-checks
    option  log-separate-errors
    option  forwardfor       except 127.0.0.0/8
    option  redispatch
    option  http-server-close
    option  httpchk GET /health
    
    # Timeouts
    timeout connect         5s
    timeout client          30s
    timeout server          30s
    timeout http-request    10s
    timeout http-keep-alive 30s
    timeout check           10s
    timeout queue           30s
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    # Connection limits
    maxconn 3000
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml

# Statistics
listen stats
    bind *:8404
    stats enable
    stats hide-version
    stats uri /stats
    stats refresh 30s
    stats realm HAProxy\ Statistics
    stats auth admin:${HAPROXY_STATS_PASSWORD}

# Frontend - HTTP to HTTPS redirect
frontend http_frontend
    bind *:80
    mode http
    
    # ACME challenge for Let's Encrypt
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt-backend if letsencrypt-acl
    
    # Redirect all HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc } !letsencrypt-acl

# Frontend - HTTPS
frontend https_frontend
    bind *:443 ssl crt /etc/haproxy/certs/boomcard.pem alpn h2,http/1.1
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Request ID for tracing
    unique-id-format %{+X}o\ %ci:%cp_%fi:%fp_%Ts_%rt:%pid
    unique-id-header X-Request-ID
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # ACLs for routing
    acl is_api path_beg /api/
    acl is_admin path_beg /admin
    acl is_partner path_beg /partner
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_static path_beg /static/ /images/ /css/ /js/ /fonts/
    acl is_health path /health
    
    # Backend selection
    use_backend api_backend if is_api
    use_backend admin_backend if is_admin
    use_backend partner_backend if is_partner
    use_backend websocket_backend if is_websocket
    use_backend static_backend if is_static
    use_backend health_backend if is_health
    default_backend web_backend

# Backend - Web Application (Next.js)
backend web_backend
    mode http
    balance roundrobin
    option httpchk GET /api/health
    http-check expect status 200
    
    # Sticky sessions for SSR
    cookie SERVERID insert indirect nocache httponly secure
    
    # Web servers
    server web1 web1:3000 check cookie web1 maxconn 100 inter 2000 rise 2 fall 3
    server web2 web2:3000 check cookie web2 maxconn 100 inter 2000 rise 2 fall 3
    server web3 web3:3000 check cookie web3 maxconn 100 inter 2000 rise 2 fall 3 backup

# Backend - API Services
backend api_backend
    mode http
    balance leastconn
    option httpchk GET /api/health
    http-check expect status 200
    
    # API rate limiting
    stick-table type ip size 100k expire 1m store http_req_rate(1m)
    http-request track-sc1 src
    http-request deny if { sc_http_req_rate(1) gt 1000 }
    
    # API servers
    server api1 api1:4000 check maxconn 200 inter 2000 rise 2 fall 3
    server api2 api2:4000 check maxconn 200 inter 2000 rise 2 fall 3
    server api3 api3:4000 check maxconn 200 inter 2000 rise 2 fall 3
    server api4 api4:4000 check maxconn 200 inter 2000 rise 2 fall 3 backup

# Backend - Admin Panel
backend admin_backend
    mode http
    balance source
    option httpchk GET /health
    http-check expect status 200
    
    # Additional security for admin
    http-request deny if !{ src -f /etc/haproxy/admin_whitelist.lst }
    
    # Admin servers
    server admin1 admin1:5000 check maxconn 50 inter 2000 rise 2 fall 3
    server admin2 admin2:5000 check maxconn 50 inter 2000 rise 2 fall 3 backup

# Backend - Partner Dashboard
backend partner_backend
    mode http
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Sticky sessions for partner portal
    cookie PARTNERID insert indirect nocache httponly secure
    
    # Partner servers
    server partner1 partner1:5500 check cookie partner1 maxconn 100 inter 2000 rise 2 fall 3
    server partner2 partner2:5500 check cookie partner2 maxconn 100 inter 2000 rise 2 fall 3

# Backend - WebSocket
backend websocket_backend
    mode http
    balance source
    option http-server-close
    option forceclose
    
    # WebSocket specific timeouts
    timeout server 3600s
    timeout client 3600s
    timeout connect 4s
    
    # WebSocket servers
    server ws1 ws1:6000 check maxconn 500 inter 2000 rise 2 fall 3
    server ws2 ws2:6000 check maxconn 500 inter 2000 rise 2 fall 3

# Backend - Static Assets
backend static_backend
    mode http
    balance roundrobin
    
    # Cache headers for static content
    http-response set-header Cache-Control "public, max-age=31536000, immutable" if { path_end .jpg .jpeg .png .gif .ico .svg .woff .woff2 .ttf .eot }
    http-response set-header Cache-Control "public, max-age=86400" if { path_end .css .js }
    
    # Static servers (CDN origin)
    server static1 static1:8080 check maxconn 300 inter 2000 rise 2 fall 3
    server static2 static2:8080 check maxconn 300 inter 2000 rise 2 fall 3

# Backend - Health checks
backend health_backend
    mode http
    errorfile 200 /etc/haproxy/responses/200.http

# Backend - Let's Encrypt
backend letsencrypt-backend
    mode http
    server letsencrypt 127.0.0.1:8888

# Cache configuration for static assets
cache static_cache
    total-max-size 100
    max-object-size 10000
    max-age 3600

# Enable cache for static backend
backend static_backend_cached
    mode http
    http-request cache-use static_cache
    http-response cache-store static_cache
    
    server static1 static1:8080 check
    server static2 static2:8080 check
